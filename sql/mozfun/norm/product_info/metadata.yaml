---
friendly_name: Normalize Product Info
description: |
  Returns a normalized `looker_app_name`, `product` name, and `canonical_name`
  for a product based on the raw `app_name` and `normalized_os` values that
  appear in (legacy) pings.

  As of 2021, most Mozilla products are sending telemetry via the Glean SDK,
  with Glean telemetry in active development for desktop Firefox as well. The
  `probeinfo` API is the single source of truth for metadata about applications
  sending Glean telemetry, and the values here should match fields included in
  [the v2 Glean app listings endpoint
  ](https://mozilla.github.io/probe-scraper/#operation/getAppListings)
  as much as possible.
  That said, this function is oriented towards handling the transitional
  period where legacy pings are still important for some reporting.

  For legacy telemetry pings like `main` ping for desktop and `core` ping for
  mobile products, the `app_name` give as input to this function
  should come from the submission URI (stored as
  `metadata.uri.app_name` in BigQuery ping tables).

  For Glean pings, the concept of an `app_name` doesn't exist, since pings
  from different applications are routed to different BigQuery datasets.
  Instead, the `app_name` sent in for Glean pings should be the same value as
  what's expected for `product`. So, a view on top of pings from Fenix should
  pass in "Fenix" for `app_name`.

  The returned `product` name and `looker_app_name` values are intended to be
  readable and unambiguous, but short and easy to type.
  They are suitable for use as a key in derived tables.
  `product` is deprecated
  and is provided for continuity with some existing tables. Going forward,
  use `looker_app_name` which maps to the `app_name` returned by the `probeinfo`
  API for Glean apps.

  The returned `canonical_app_name` is more verbose and is suited for displaying
  in visualizations. `canonical_name` is a synonym that we provide for
  historical compatibility, but `canonical_app_name` is the preferred
  "end-to-end" term for this identifier.

  The returned struct also contains boolean `contributes_to_2021_kpi` as the
  canonical reference for whether the given application is included in KPI
  reporting. Additional fields may be added for future years.

  The `normalized_os` value that's passed in should be the top-level
  `normalized_os` value present in any ping table or you may want
  to wrap a raw value in `mozfun.norm.os`
  like `mozfun.norm.product_info(app_name, mozfun.norm.os(os))`.

  This function also tolerates passing in a `product` value as `app_name` so
  that this function is still useful for derived tables which have thrown away
  the raw `app_name` value.
