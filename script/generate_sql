#!/usr/bin/env python3

"""
This script generates SQL files for each SQL file in `sql/` and
includes all the temporary UDF definitions used in the queries.

This script can be called via exec() (eg. in conftest.py).
"""

from argparse import ArgumentParser
import os, sys

# sys.path needs to be modified to enable package imports from parent
# and sibling directories. Also see:
# https://stackoverflow.com/questions/6323860/sibling-package-imports/23542795#23542795
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from bigquery_etl.parse_udf import UDF_DIRS, read_udf_dirs, prepend_udf_usage_definitions
from textwrap import dedent
import shutil
import re


parser = ArgumentParser(description=__doc__)
parser.add_argument(
    "--destination",
    default="sql/",
    help="The path where generated SQL files will be stored.",
)
parser.add_argument(
    "--udf-dir",
    default=UDF_DIRS,
    nargs='+',
    help="Directories where declarations of temporary UDFs are stored.",
)
parser.add_argument(
    "--sql-dir",
    default="templates/",
    help="The path where files with SQL queries are stored.",
)


def main():
    args = parser.parse_args()

    raw_udfs = read_udf_dirs(*args.udf_dir)

    # create output directory if not exists or remove existing files
    if os.path.exists(args.destination):
        shutil.rmtree(args.destination, ignore_errors=True)
    os.makedirs(args.destination, exist_ok=True)

    for root, dirs, files in os.walk(args.sql_dir):
        sql_files = [filename for filename in files if filename.endswith(".sql")]

        basename = root.replace(args.sql_dir, args.destination, 1)
        if not os.path.exists(basename) and (dirs or sql_files):
            os.mkdir(basename)

        for filename in sql_files:
            with open(os.path.join(root, filename)) as input_file:
                text = input_file.read()

            full_text = prepend_udf_usage_definitions(text, raw_udfs)

            with open(os.path.join(basename, filename), "a+") as output_file:
                output_file.write(full_text)


if __name__ == "__main__":
    main()
