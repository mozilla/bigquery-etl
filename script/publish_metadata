#!/usr/bin/env python3

"""Update metadata of BigQuery tables and views."""

from argparse import ArgumentParser
import logging
import os
import sys
import yaml

from google.cloud import bigquery


# sys.path needs to be modified to enable package imports from parent
# and sibling directories. Also see:
# https://stackoverflow.com/questions/6323860/sibling-package-imports/23542795#23542795
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from bigquery_etl.parse_metadata import Metadata  # noqa E402


METADATA_FILE = "metadata.yaml"


def publish_metadata(client, dataset, table, metadata_file):
    try:
        metadata = Metadata.from_file(metadata_file)
        table_ref = client.dataset(dataset).table(table)
        table = client.get_table(table_ref)

        if metadata.friendly_name is not None:
            table.friendly_name = metadata.friendly_name

        if metadata.description is not None:
            table.description = metadata.description

        table.labels = metadata.labels

        client.update_table(table, ["friendly_name", "description", "labels"])
    except yaml.YAMLError as e:
        print(e)


def main():
    parser = ArgumentParser(description=__doc__)
    parser.add_argument("--project-id", help="Default project")
    parser.add_argument(
        "--target", nargs="+", help="File or directory containing metadata files"
    )

    parser.add_argument("--log-level", default="INFO", help="Defaults to INFO")

    args = parser.parse_args()
    client = bigquery.Client(args.project_id)

    # set log level
    try:
        logging.basicConfig(level=args.log_level, format="%(levelname)s %(message)s")
    except ValueError as e:
        parser.error(f"argument --log-level: {e}")

    for target in args.target:
        if os.path.isdir(target):
            for root, dirs, files in os.walk(target):
                if METADATA_FILE in files:
                    path = os.path.normpath(root)
                    dataset = path.split(os.sep)[-2]
                    table = path.split(os.sep)[-1]
                    metadata_file = os.path.join(root, METADATA_FILE)

                    publish_metadata(client, dataset, table, metadata_file)
        else:
            print(
                """
                Invalid target: {}, target must be a directory with
                structure /<dataset>/<table>/metadata.yaml.
                """.format(
                    args.target
                )
            )


if __name__ == "__main__":
    main()
