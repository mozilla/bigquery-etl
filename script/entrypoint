#!/bin/bash

set -e

# Use credentials from environment
if [ -n "$GCLOUD_SERVICE_KEY" ]; then
    # Google's client libraries will check for GOOGLE_APPLICATION_CREDENTIALS
    # and use a file in that location for credentials if present;
    # See https://cloud.google.com/docs/authentication/production
    export GOOGLE_APPLICATION_CREDENTIALS="${GOOGLE_APPLICATION_CREDENTIALS:-/tmp/gcp.json}"
    echo "$GCLOUD_SERVICE_KEY" > "$GOOGLE_APPLICATION_CREDENTIALS"
    if which -s gcloud; then
        gcloud --quiet auth activate-service-account --key-file "$GOOGLE_APPLICATION_CREDENTIALS"
        python -W ignore -c 'import google.auth; print("project = ", google.auth.default()[1])' >> ~/.config/gcloud/configurations/config_default
        cat > ~/.bigqueryrc << EOF
--project_id=$(gcloud config get-value project)
--dataset_id=telemetry
[mk]
--use_legacy_sql=false
[query]
--use_legacy_sql=false
--replace=true
--max_rows=0
[update]
--use_legacy_sql=false
EOF
    fi
fi

if [ "$#" = 0 ]; then
    # Default to 20 workers because most of the tests are io-bound
    exec pytest --black --docstyle --flake8 --mypy-ignore-missing-imports --numprocesses 20
elif [ "${1:0:1}" = - ]; then
    # First argument is a flag, assume intended executable is pytest
    exec pytest "$@"
elif [ "$1" = "query" ]; then
    # Alias
    #     query [options] FILE
    # to
    #     bq query [options] < FILE
    exec bq "${@:1:$#-1}" < "${@: -1}"
else
    exec "$@"
fi
