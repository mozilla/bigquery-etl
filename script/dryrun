#!/usr/bin/env python

import glob
import json
from multiprocessing.pool import ThreadPool
import os.path
import sys
from urllib.request import urlopen, Request


DRY_RUN_URL = "https://us-central1-moz-fx-data-derived-datasets.cloudfunctions.net/bigquery-etl-dryrun"

SKIP = {
    # Access Denied
    "sql/telemetry/fxa_content_events_v1.sql",
    "sql/telemetry/fenix_events_v1.sql",
    "sql/telemetry/fenix_events_amplitude_v1.sql",
    "sql/telemetry/fxa_auth_bounce_events_v1.sql",
    "sql/telemetry/fxa_auth_events_v1.sql",
    "sql/telemetry/glean_clients_daily_v1.sql",
    # Already exists (and lacks an "OR REPLACE" clause)
    "sql/telemetry/glean_clients_last_seen_raw_v1.init.sql",
    "sql/telemetry/core_clients_last_seen_raw_v1.init.sql",
    "sql/telemetry/fxa_users_last_seen_raw_v1.init.sql",
    # Reference table not found
    "sql/search/search_clients_daily_v7.sql",
    # Cannot access field list
    "sql/telemetry/lockwise_mobile_events_v1.sql",
    # No matching signature for function IF
    "sql/static/fxa_amplitude_export_users_last_seen.sql",
    # SQL functions with the same name but different signatures are currently unsupported
    "sql/static/fxa_amplitude_export_users_daily.sql",
    # Syntax error
    "sql/telemetry_derived/clients_last_seen_v1.init.sql",
    # Unrecognized name: submission_date_s3
    "sql/telemetry_derived/addons_v3.sql",
    "sql/telemetry_derived/addons_aggregates_v3.sql",
}


def worker_entrypoint(sqlfile):
    sql = open(sqlfile).read()
    try:
        r = urlopen(
            Request(
                DRY_RUN_URL,
                headers={"Content-Type": "application/json"},
                data=json.dumps(
                    {
                        "dataset": os.path.basename(os.path.dirname(sqlfile)),
                        "query": sql,
                    }
                ).encode("utf8"),
                method="POST",
            )
        )
    except Exception as e:
        print(f"{sqlfile:59} ERROR\n", e)
        return False
    response = json.load(r)
    if "errors" in response and len(response["errors"]) == 1:
        error = response["errors"][0]
    else:
        error = None
    if response["valid"]:
        print(f"{sqlfile:59} OK")
    elif (
        error
        and error["code"] == 403
        and "does not have bigquery.tables.create permission for dataset"
        in error["message"]
    ):
        # We want the dryrun service to only have read permissions, so
        # we expect CREATE VIEW and CREATE TABLE to throw specific
        # exceptions.
        print(f"{sqlfile:59} OK, but with insufficient access to create table/view")
    else:
        print(f"{sqlfile:59} ERROR\n", response["errors"])
        return False
    return True


def main():
    sqlfiles = [f for f in glob.glob("sql/*/*.sql") if f not in SKIP]
    with ThreadPool(8) as p:
        result = p.map(worker_entrypoint, sqlfiles, chunksize=1)
    if all(result):
        exitcode = 0
    else:
        exitcode = 1
    sys.exit(exitcode)


if __name__ == "__main__":
    main()
