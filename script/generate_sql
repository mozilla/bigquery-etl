#!/usr/bin/env python3

"""
This script generates SQL files for each SQL file in `sql/` and
includes all the temporary UDF definitions used in the queries.

This script can be called via exec() (eg. in conftest.py).
"""

from argparse import ArgumentParser
import os
import shutil
import sys
import tempfile

# sys.path needs to be modified to enable package imports from parent
# and sibling directories. Also see:
# https://stackoverflow.com/questions/6323860/sibling-package-imports/23542795#23542795
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from bigquery_etl.parse_udf import (
    UDF_DIRS,
    read_udf_dirs,
    prepend_udf_usage_definitions,
)  # noqa E402


METADATA_FILE = "metadata.yaml"


parser = ArgumentParser(description=__doc__)
parser.add_argument(
    "--destination",
    default="sql/",
    help="The path where generated SQL files will be stored.",
)
parser.add_argument(
    "--udf-dir",
    default=UDF_DIRS,
    nargs="+",
    help="Directories where declarations of temporary UDFs are stored.",
)
parser.add_argument(
    "--sql-dir",
    default="templates/",
    help="The path where files with SQL queries are stored.",
)


def main():
    args = parser.parse_args()
    args.sql_dir = os.path.abspath(args.sql_dir)

    raw_udfs = read_udf_dirs(*args.udf_dir)

    with tempfile.TemporaryDirectory() as d:
        for root, dirs, files in os.walk(args.sql_dir):
            sql_files = [filename for filename in files if filename.endswith(".sql")]

            basename = root.replace(args.sql_dir, d, 1)
            if not os.path.exists(basename) and (dirs or sql_files):
                os.mkdir(basename)

            for filename in sql_files:
                with open(os.path.join(root, filename)) as input_file:
                    text = input_file.read()

                full_text = prepend_udf_usage_definitions(text, raw_udfs)

                with open(os.path.join(basename, filename), "a+") as output_file:
                    output_file.write(full_text)

            if METADATA_FILE in files:
                shutil.copyfile(
                    os.path.join(root, METADATA_FILE),
                    os.path.join(basename, METADATA_FILE),
                )

        if os.path.exists(args.destination):
            shutil.rmtree(args.destination, ignore_errors=True)
        shutil.copytree(d, args.destination)


if __name__ == "__main__":
    main()
