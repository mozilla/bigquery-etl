r"""Generate a query for incremental processing of scalar aggregates.

```bash
python -m bigquery_etl.glam.scalar_aggregates_incremental \
    > sql/telemetry_derived/clients_scalar_aggregates_v1/query.sql
```
"""
from jinja2 import Environment, PackageLoader
from bigquery_etl.format_sql.formatter import reformat

ATTRIBUTES = ["client_id", "os", "app_version", "app_build_id", "channel"]

USER_DATA_TYPE = """
ARRAY<
    STRUCT<
      metric STRING,
      metric_type STRING,
      key STRING,
      process STRING,
      agg_type STRING,
      value FLOAT64
    >
  >
"""

USER_DATA_ATTRIBUTES = [
    "metric",
    "metric_type",
    "key",
    "process",
    # [agg_type, value] are shared between telemetry and glean
]

EXTRACT_SELECT_CLAUSE = f"""
* EXCEPT(app_version),
CAST(app_version AS INT64) as app_version
"""

JOIN_FILTER = """
LEFT JOIN
    latest_versions
USING
    (channel)
WHERE
    app_version >= (latest_version - 2)
"""


def main():
    """Generate `telemetry_derived.clients_scalar_aggregates_v1`."""
    env = Environment(loader=PackageLoader("bigquery_etl", "glam/templates"))
    main_sql = env.get_template("clients_scalar_aggregates_v1.sql")

    module_name = "bigquery_etl.glam.scalar_aggregates_incremental"
    header = f"-- generated by: python3 -m {module_name}"
    rendered = main_sql.render(
        header=header,
        user_data_type=USER_DATA_TYPE,
        user_data_attributes=",".join(USER_DATA_ATTRIBUTES),
        attributes=",".join(ATTRIBUTES),
        attributes_list=ATTRIBUTES,
        extract_select_clause=EXTRACT_SELECT_CLAUSE,
        join_filter=JOIN_FILTER,
    )
    print(reformat(rendered))


if __name__ == "__main__":
    main()
