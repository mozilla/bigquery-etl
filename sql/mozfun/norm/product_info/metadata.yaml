---
friendly_name: Normalize Product Info
description: |
  Returns a normalized `app_name` and `canonical_app_name`
  for a product based on `legacy_app_name` and `normalized_os` values.
  Thus, this function serves as a bridge to get from legacy application
  identifiers to the consistent identifiers we are using for reporting in 2021.

  As of 2021, most Mozilla products are sending telemetry via the Glean SDK,
  with Glean telemetry in active development for desktop Firefox as well. The
  `probeinfo` API is the single source of truth for metadata about applications
  sending Glean telemetry; the values for `app_name` and
  `canonical_app_name` returned here correspond to the "end-to-end identifier"
  values documented in
  [the v2 Glean app listings endpoint
  ](https://mozilla.github.io/probe-scraper/#operation/getAppListings).
  For non-Glean telemetry, we provide values in the same style to provide
  continuity as we continue the migration to Glean.

  For legacy telemetry pings like `main` ping for desktop and `core` ping for
  mobile products, the `legacy_app_name` given as input to this function
  should come from the submission URI (stored as
  `metadata.uri.app_name` in BigQuery ping tables).
  For Glean pings, we have invented `product` values that can be passed
  in to this function as the `legacy_app_name` parameter.

  The returned `app_name` values are intended to be
  readable and unambiguous, but short and easy to type.
  They are suitable for use as a key in derived tables.
  `product` is a deprecated field that was similar in intent.

  The returned `canonical_app_name` is more verbose and is suited for displaying
  in visualizations. `canonical_name` is a synonym that we provide for
  historical compatibility with previous versions of this function.

  The returned struct also contains boolean `contributes_to_2021_kpi` as the
  canonical reference for whether the given application is included in KPI
  reporting. Additional fields may be added for future years.

  The `normalized_os` value that's passed in should be the top-level
  `normalized_os` value present in any ping table or you may want
  to wrap a raw value in `mozfun.norm.os`
  like `mozfun.norm.product_info(app_name, mozfun.norm.os(os))`.

  This function also tolerates passing in a `product` value as
  `legacy_app_name` so that this function is still useful for derived tables
  which have thrown away the raw `app_name` value from legacy pings.
