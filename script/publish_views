#!/usr/bin/env python3

"""Find view definition files and execute them."""

from argparse import ArgumentParser
import logging
import os

from google.cloud import bigquery
import sqlparse

VIEWS_TO_AUTHORIZE = (
    "sql/monitoring/payload_bytes_error_structured/view.sql",
    "sql/monitoring/payload_bytes_error_telemetry/view.sql",
    "sql/monitoring/payload_bytes_raw_structured/view.sql",
    "sql/monitoring/payload_bytes_raw_telemetry/view.sql",
)


def process_file(client, args, filepath):
    with open(filepath) as f:
        sql = f.read()
    parsed = sqlparse.parse(sql)[0]
    tokens = [t for t in parsed.tokens if not t.is_whitespace]
    if tokens[0].normalized == "CREATE OR REPLACE" and tokens[1].normalized == "VIEW":
        target_view_orig = str(tokens[2]).strip().split()[0]
        target_view = target_view_orig
        if args.target_project:
            project_id = target_view_orig.strip("`").split(".", 1)[0]
            target_view = target_view_orig.replace(project_id, args.target_project, 1)
            # We only change the first occurrence, which is in the target view name.
            sql = sql.replace(project_id, args.target_project, 1)
        job_config = bigquery.QueryJobConfig(use_legacy_sql=False, dry_run=args.dry_run)
        query_job = client.query(sql, job_config)
        if args.dry_run:
            print(f"Validated definition of {target_view} in {filepath}")
        else:
            query_job.result()
            print(f"Published view {target_view}")
            # Authorize view if necessary; see
            # https://cloud.google.com/bigquery/docs/share-access-views
            if filepath in VIEWS_TO_AUTHORIZE:
                view = client.get_table(target_view.replace("`", ""))
                source_datasets = set(
                    ".".join([t.project, t.dataset_id])
                    for t in query_job.referenced_tables
                )
                for d in source_datasets:
                    source_dataset = client.get_dataset(d)
                    access_entries = source_dataset.access_entries
                    access_entries.append(
                        bigquery.AccessEntry(None, "view", view.reference.to_api_repr())
                    )
                    source_dataset.access_entries = access_entries
                    source_dataset = client.update_dataset(
                        source_dataset, ["access_entries"]
                    )
                print(f"Authorized view {target_view}")


def main():
    parser = ArgumentParser(description=__doc__)
    parser.add_argument(
        "target",
        nargs="+",
        help="File or directory containing view definitions to execute",
    )
    parser.add_argument(
        "--target-project",
        help=(
            "If specified, create views in the target project rather than"
            " the project specified in the file"
        ),
    )
    parser.add_argument("--log-level", default="INFO", help="Defaults to INFO")
    parser.add_argument(
        "--authorize",
        action="store_true",
        help=(
            "If enabled, process views that need authorization "
            "(requires admin privs on the source datasets)"
        ),
    )
    parser.add_argument(
        "--dry_run",
        "--dry-run",
        action="store_true",
        help="Validate view definitions, but do not publish them.",
    )

    args = parser.parse_args()
    client = bigquery.Client()

    # set log level
    try:
        logging.basicConfig(level=args.log_level, format="%(levelname)s %(message)s")
    except ValueError as e:
        parser.error(f"argument --log-level: {e}")

    for target in args.target:
        if os.path.isdir(target):
            for root, dirs, files in os.walk(target):
                if "view.sql" in files:
                    filepath = os.path.join(root, "view.sql")
                    if args.authorize or filepath not in VIEWS_TO_AUTHORIZE:
                        process_file(client, args, filepath)
        else:
            process_file(client, args, target)


if __name__ == "__main__":
    main()
